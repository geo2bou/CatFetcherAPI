// <auto-generated />
using System;
using CatFetcherAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatFetcherAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250417221945_CatFetcherAPI18042025")]
    partial class CatFetcherAPI18042025
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatFetcherAPI.Models.CatEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cats");
                });

            modelBuilder.Entity("CatFetcherAPI.Models.CatTag", b =>
                {
                    b.Property<int>("CatEntityId")
                        .HasColumnType("int");

                    b.Property<int>("TagEntityId")
                        .HasColumnType("int");

                    b.HasKey("CatEntityId", "TagEntityId");

                    b.HasIndex("TagEntityId");

                    b.ToTable("CatTags");
                });

            modelBuilder.Entity("CatFetcherAPI.Models.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CatFetcherAPI.Models.CatTag", b =>
                {
                    b.HasOne("CatFetcherAPI.Models.CatEntity", "Cat")
                        .WithMany("CatTags")
                        .HasForeignKey("CatEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatFetcherAPI.Models.TagEntity", "Tag")
                        .WithMany("CatTags")
                        .HasForeignKey("TagEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cat");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CatFetcherAPI.Models.CatEntity", b =>
                {
                    b.Navigation("CatTags");
                });

            modelBuilder.Entity("CatFetcherAPI.Models.TagEntity", b =>
                {
                    b.Navigation("CatTags");
                });
#pragma warning restore 612, 618
        }
    }
}
